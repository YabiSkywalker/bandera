package com.example.bandera.entities;

import com.example.bandera.TicketStatus;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.validation.constraints.NotNull;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.Id;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.mongodb.core.mapping.DBRef;
import org.springframework.data.mongodb.core.mapping.Document;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;


@Document(collection = "ticket_entity")
public class TicketEntity {

    /* Autogenerated id from phpmyadmin + connecting to the vehicle_entity table via the vehicle_id column + connecting to the customer_entity table via the id column" */
    @Id
    @JsonProperty(access = JsonProperty.Access.READ_ONLY)
    private String id;
    /* ------------------------ the start of the columns for the ticket_entity --------------------- */
    @JsonFormat(pattern = "yyyy-MM-dd hh:mm a")
    private LocalDateTime dateTime;
    @DBRef
    @NotNull
    @JsonProperty(access = JsonProperty.Access.READ_ONLY)
    private EmployeesEntity assignee; //assignee field

    private List<ServiceEntity> serviceEntity;
    @NotNull
    private BigDecimal preliminaryCost; //up front estimate
    @NotNull
    private BigDecimal tax; //place holder
    @NotNull
    private double subtotal;
    @NotNull
    private TicketStatus ticketStatus;
    @DBRef
    @NotNull
    private CustomersEntity customer;
    @DBRef
    @NotNull
    private VehicleEntity vehicle;
    @CreatedDate
    @JsonProperty(access = JsonProperty.Access.READ_ONLY)
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    private LocalDateTime createdAt;

    @LastModifiedDate
    @JsonProperty(access = JsonProperty.Access.READ_ONLY)
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    private LocalDateTime lastModified;

    /* ------------------------ GETTERS && SETTERS --------------------- */



    public String getId() {
        return id;
    }

    public EmployeesEntity getAssignee() {
        return assignee;
    }

    public void setAssignee(EmployeesEntity assignee) {
        this.assignee = assignee;
    }

    public LocalDateTime getDateTime() {
        return dateTime;
    }

    public void setDateTime(LocalDateTime dateTime) {
        this.dateTime = dateTime;
    }

    public CustomersEntity getCustomer() {
        return customer;
    }

    public void setCustomer(CustomersEntity customer) {
        this.customer = customer;
    }
    public void addService(ServiceEntity service) {
        if (service != null) {
            this.serviceEntity.add(service);
        }
    }

    // Method to remove a service from the list
    public void removeServiceByIndex(int index) {
        if (index >= 0 && index < this.serviceEntity.size()) {
            this.serviceEntity.remove(index);
        }
    }

    public List<ServiceEntity> getServiceEntity() {
        return serviceEntity;
    }

    public void setServiceEntity(List<ServiceEntity> serviceEntity) {
        this.serviceEntity = serviceEntity;
    }



    public BigDecimal getPreliminaryCost() {
        return preliminaryCost;
    }

    public void setPreliminaryCost(BigDecimal preliminaryCost) {
        this.preliminaryCost = preliminaryCost;
    }

    public BigDecimal getTax() {
        return tax;
    }

    public void setTax(BigDecimal tax) {
        this.tax = tax;
    }

    public double getSubtotal() {
        return subtotal;
    }

    public void setSubtotal(double subtotal) {
        this.subtotal = subtotal;
    }

    public TicketStatus getTicketStatus() {
        return ticketStatus;
    }

    public void setTicketStatus(TicketStatus status) {
        this.ticketStatus = status;
    }

    public VehicleEntity getVehicle() {
        return vehicle;
    }

    public void setVehicle(VehicleEntity vehicle) {
        this.vehicle = vehicle;
    }
}
